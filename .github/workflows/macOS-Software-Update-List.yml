name: macOS Software Update List and Version Update

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 매일 자정에 실행

jobs:
  update-macos-versions:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run softwareupdate command
        run: |
          softwareupdate --list-full-installers | grep macOS | awk -F', ' '/^* Title:/ {split($1, a, ": ");
              split($2, b, ": ");
              print a[2], b[2];
          }' > list.txt

          cat ./list.txt

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Extract latest versions
        run: |
          python3 - <<EOF
          import re
          from collections import defaultdict

          def extract_latest_versions(input_file, output_file):
              versions = defaultdict(lambda: [0, ''])
              
              with open(input_file, 'r') as f:
                  for line in f:
                      match = re.match(r'(macOS \w+) (\d+(?:\.\d+)*)', line.strip())
                      if match:
                          os, version = match.groups()
                          try:
                              version_tuple = tuple(map(lambda x: int(x or 0), version.split('.')))
                              if version_tuple > tuple(map(lambda x: int(x or 0), versions[os][1].split('.'))):
                                  versions[os] = [version_tuple, version]
                          except ValueError as e:
                              print(f"Error processing version {version} for {os}: {e}")
              
              with open(output_file, 'w') as f:
                  for os in sorted(versions.keys()):
                      f.write(f"{os} {versions[os][1]}\n")

          extract_latest_versions('list.txt', 'latest_versions.txt')
          EOF

          cat ./latest_versions.txt

      - name: Update PowerShell script
        run: |
          python3 - <<EOF
          import re

          # 최신 버전 정보 읽기
          with open('latest_versions.txt', 'r') as f:
              latest_versions = f.read().strip().split('\n')

          # 최신 버전 딕셔너리 생성
          latest_versions_dict = {' '.join(line.split()[:-1]): line.split()[-1] for line in latest_versions}

          # PowerShell 스크립트 읽기
          with open('macos_down.ps1', 'r') as f:
              ps_content = f.read()

          # $options 배열 찾기
          options_match = re.search(r'\$options\s*=\s*@\((.*?)\)', ps_content, re.DOTALL)
          if options_match:
              old_options = options_match.group(1)
              
              # 각 옵션 업데이트
              new_options = []
              for option in old_options.split(','):
                  option = option.strip().strip('"')
                  if option == "Exit":
                      new_options.append(f'"{option}"')
                  else:
                      os_name = ' '.join(option.split()[:-1])
                      if os_name in latest_versions_dict:
                          new_version = latest_versions_dict[os_name]
                          new_option = f'"{os_name} ({new_version})"'
                      else:
                          new_option = f'"{option}"'
                      new_options.append(new_option)

              # 새 $options 배열 생성
              new_options_str = ',\n    '.join(new_options)
              new_options_array = f'$options = @(\n    {new_options_str}\n)'

              # 기존 $options 배열 교체
              updated_content = ps_content.replace(options_match.group(0), new_options_array)

              # 업데이트된 내용 저장
              with open('macos_down.ps1', 'w') as f:
                  f.write(updated_content)

              print("Updated $options array in macos_down.ps1:")
              print(new_options_array)
          else:
              print("$options array not found in macos_down.ps1")
          EOF

      #- name: Commit and push changes
      #  run: |
      #    git config --local user.email "action@github.com"
      #    git config --local user.name "GitHub Action"
      #    git add list.txt latest_versions.txt macos_down.ps1
      #    git commit -m "Update macOS versions and scripts"
      #    git push

      - name: Upload files as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: updated-files
          path: |
            list.txt
            latest_versions.txt
            macos_down.ps1
