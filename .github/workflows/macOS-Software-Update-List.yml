name: macOS Software Update List and Version Update

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 매일 자정에 실행

jobs:
  update-macos-versions:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run softwareupdate command
        run: |
          softwareupdate --list-full-installers | grep macOS | awk -F', ' '/^* Title:/ {split($1, a, ": ");
              split($2, b, ": ");
              print a[2], b[2];
          }' > list.txt

          cat ./list.txt

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Extract latest versions
        run: |
          python3 - <<EOF
          import re
          from collections import defaultdict

          def extract_latest_versions(input_file, output_file):
              versions = defaultdict(lambda: [0, ''])
              
              with open(input_file, 'r') as f:
                  for line in f:
                      match = re.match(r'(macOS \w+) (\d+(?:\.\d+)*)', line.strip())
                      if match:
                          os, version = match.groups()
                          try:
                              version_tuple = tuple(map(lambda x: int(x or 0), version.split('.')))
                              if version_tuple > tuple(map(lambda x: int(x or 0), versions[os][1].split('.'))):
                                  versions[os] = [version_tuple, version]
                          except ValueError as e:
                              print(f"Error processing version {version} for {os}: {e}")
              
              with open(output_file, 'w') as f:
                  for os in sorted(versions.keys()):
                      f.write(f"{os} {versions[os][1]}\n")

          extract_latest_versions('list.txt', 'latest_versions.txt')
          EOF

          cat ./latest_versions.txt

      - name: Update PowerShell script
        run: |
          python3 - <<EOF
          with open('latest_versions.txt', 'r') as f:
              latest_versions = f.read()

          with open('macos_down.ps1', 'r') as f:
              macos_down_content = f.read()

          latest_versions_dict = {}
          for line in latest_versions.strip().split('\n'):
              parts = line.split()
              version_name = ' '.join(parts[:-1])
              version_number = parts[-1]
              latest_versions_dict[version_name] = version_number

          updated_options = []
          for option in macos_down_content.strip().split('"')[1::2]:
              if option == "Exit":
                  updated_options.append(option)
                  continue
              
              version_name = ' '.join(option.split()[:-1])
              if version_name in latest_versions_dict:
                  updated_option = f'{version_name} ({latest_versions_dict[version_name]})'
                  updated_options.append(updated_option)
              else:
                  updated_options.append(option)

          updated_content = 'select option in "' + '" "'.join(updated_options) + '"'

          with open('macos_down.ps1', 'w') as f:
              f.write(updated_content)

          print("Updated macos_down.ps1:")
          print(updated_content)
          EOF

      #- name: Commit and push changes
      #  run: |
      #    git config --local user.email "action@github.com"
      #    git config --local user.name "GitHub Action"
      #    git add list.txt latest_versions.txt macos_down.ps1
      #    git commit -m "Update macOS versions and scripts"
      #    git push

      - name: Upload files as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: updated-files
          path: |
            list.txt
            latest_versions.txt
            macos_down.ps1
