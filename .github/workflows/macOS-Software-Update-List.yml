name: macOS Software Update List and Version Update

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 매일 자정에 실행

jobs:
  update-macos-versions:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run softwareupdate command
        run: |
          softwareupdate --list-full-installers | grep macOS | awk -F', ' '/^* Title:/ {split($1, a, ": ");
              split($2, b, ": ");
              print a[2], b[2];
          }' > list.txt

          cat ./list.txt

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Extract latest versions
        run: |
          python3 - <<EOF
          import re
          from collections import defaultdict

          def extract_latest_versions(input_file, output_file):
              versions = defaultdict(lambda: [0, ''])
              
              with open(input_file, 'r') as f:
                  for line in f:
                      match = re.match(r'(macOS \w+) (\d+(?:\.\d+)*)', line.strip())
                      if match:
                          os, version = match.groups()
                          try:
                              version_tuple = tuple(map(lambda x: int(x or 0), version.split('.')))
                              if version_tuple > tuple(map(lambda x: int(x or 0), versions[os][1].split('.'))):
                                  versions[os] = [version_tuple, version]
                          except ValueError as e:
                              print(f"Error processing version {version} for {os}: {e}")
              
              with open(output_file, 'w') as f:
                  for os in sorted(versions.keys()):
                      f.write(f"{os} {versions[os][1]}\n")

          extract_latest_versions('list.txt', 'latest_versions.txt')
          EOF

          cat ./latest_versions.txt

      - name: Update PowerShell script
        run: |
          python3 - <<EOF
          import re

          # 초기 options 배열을 딕셔너리로 관리
          initial_options = {
              "macOS Lion": "10.7.5",
              "macOS Mountain Lion": "10.8.5",
              "macOS Mavericks": "10.9.5",
              "macOS Yosemite": "10.10.5",
              "macOS El Capitan": "10.11.6",
              "macOS Sierra": "10.12.6",
              "macOS High Sierra": "10.13.6",
              "macOS Mojave": "10.14.6",
              "macOS Catalina": "10.15.7",
              "macOS Big Sur": "11.7.10",
              "macOS Monterey": "12.7.6",
              "macOS Ventura": "13.7.1",
              "macOS Sonoma": "14.7.1",
              "macOS Sequoia": "15.1.1",
              "macOS Tahoe": "26.0.1"
          }

          # latest_versions.txt 읽기
          with open('latest_versions.txt', 'r') as f:
              latest_versions = f.read().strip().split('\n')

          # 최신 버전 정보로 딕셔너리 업데이트
          for line in latest_versions:
              os_name, version = line.rsplit(' ', 1)
              if os_name in initial_options:
                  initial_options[os_name] = version

          # 업데이트된 options 배열 생성
          updated_options = [f'    "{os} ({version})",' for os, version in initial_options.items()]
          updated_options.append('    "Exit"')

          # 새 options 배열 문자열 생성 (요구사항에 맞는 형식)
          new_options_array = '\$options = @(\n' + '\n'.join(updated_options) + '\n)'

          # macos_down.ps1 파일 읽기
          with open('macos_down.ps1', 'r') as f:
              ps_content = f.readlines()

          # 라인 28부터 44까지 교체
          ps_content[27:44] = [new_options_array + '\n']

          # 업데이트된 내용 저장
          with open('macos_down.ps1', 'w') as f:
              f.writelines(ps_content)

          print("Updated $options array in macos_down.ps1:")
          print(new_options_array)
          EOF

          cat ./macos_down.ps1

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add list.txt latest_versions.txt macos_down.ps1
          git diff-index --quiet HEAD || git commit -m "Update macOS versions and scripts"
          git push || true

      - name: Upload files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: updated-files
          path: |
            list.txt
            latest_versions.txt
            macos_down.ps1
